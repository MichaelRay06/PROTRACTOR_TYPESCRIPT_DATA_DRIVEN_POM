"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var protractor_1 = require("protractor");
var display_processor_1 = require("../display-processor");
var fs = require("fs");
var path = require("path");
var HtmlProcessor = (function (_super) {
    __extends(HtmlProcessor, _super);
    function HtmlProcessor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HtmlProcessor.prototype.displayJasmineStarted = function () {
        var htmlStyleSheetsLinks = this.generateStylesheetLinks();
        return "\n<html>\n  <head>\n    <title>" + this.configuration.title + "</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"reports.css\">\n    " + htmlStyleSheetsLinks + "\n    <script defer=\"defer\" src=\"scripts.js\"></script>\n  </head>\n  <body>\n  <h2>" + this.configuration.title + "</h2>\n  <ul>\n  <li><a href=\"#suite-table\">Test report</a></li>\n  <li><a href=\"#summary-table\">Summary report</a></li>\n  </ul>\n  <table id=\"suites-table\">\n  <caption>Test Suites report</caption>\n  <thead>\n    <tr><td>Suite</td><td>Spec</td><td>Duration</td><td>Status</td></tr>\n  </thead>\n      ";
    };
    HtmlProcessor.prototype.displaySuite = function (suite, log) {
        return "\n<tbody class=\"suite\">\n<tr class=\"suite\">\n  <td>" + log + "</td><td colspan=\"3\" />\n<tr>\n\n";
    };
    HtmlProcessor.prototype.displaySuiteDone = function (suite, log) {
        return log + "\n      </tbody>\n      ";
    };
    HtmlProcessor.prototype.displaySpecStarted = function (suite, log) {
        return "<tr class=\"spec\" id=\"spec-" + suite.id + "\">" + log;
    };
    HtmlProcessor.prototype.displaySpecDone = function (spec, log) {
        return "</tr>";
    };
    HtmlProcessor.prototype.displaySuccessfulSpec = function (spec, log) {
        return this.decorateSpec(spec, log, this.getScreenshot(spec), "SUCCESS");
    };
    HtmlProcessor.prototype.displayFailedSpec = function (spec, log) {
        return this.decorateSpec(spec, log, this.getScreenshot(spec), "FAILED", true);
    };
    HtmlProcessor.prototype.displayPendingSpec = function (spec, log) {
        return this.decorateSpec(spec, log, "", "PENDING", true);
    };
    HtmlProcessor.prototype.displaySummary = function (spec, log) {
        return "</table>" + log;
    };
    HtmlProcessor.prototype.displayJasmineDone = function (spec, log) {
        return log + "\n      </body>\n    </html>\n      ";
    };
    /**
     * Get a browser screenshot from protractor browser and save on filesystem.
     * Return the filename of the saved screenshot
     */
    HtmlProcessor.prototype.getScreenshot = function (spec) {
        var cfg = this.configuration;
        if (!cfg.spec.takeScreenshot) {
            return "";
        }
        var scrFilename = "xxxxxxxx-xxxxxxxx-xxxxxxxx.png".replace(/x/g, function (c) {
            var r = Math.floor((Math.random() * 16) + 1);
            return c === "x" ? r.toString(16) : c;
        });
        if (protractor_1.browser) {
            protractor_1.browser.takeScreenshot().then(function (png) {
                var fileNamePath = cfg.destination.folder
                    + scrFilename;
                var stream = fs.createWriteStream(fileNamePath);
                stream.write(new Buffer(png, "base64"));
                stream.end();
            });
        }
        return scrFilename;
    };
    /**
     * Create stylesheets links for imported and linked stylesheets from configuration
     */
    HtmlProcessor.prototype.generateStylesheetLinks = function () {
        var styleLinks = [];
        this.configuration.customStylesheets.forEach(function (s) {
            if (s) {
                styleLinks.push("<link rel=\"stylesheet\" type=\"text/css\" href=\"" + s + "\">");
            }
        });
        this.configuration.importStylesheets.forEach(function (s) {
            if (s) {
                styleLinks.push("<link rel=\"stylesheet\" type=\"text/css\" href=\"" + s.substr(s.lastIndexOf(path.sep) + 1) + "\">");
            }
        });
        return styleLinks.join("\n");
    };
    /**
     * Generate the Spec table row content
     */
    HtmlProcessor.prototype.decorateSpec = function (spec, log, link, status, withErrorMessages) {
        var toReturn = "<td></td><td class=\"description\">";
        if (link) {
            var screenshotFilename = link;
            toReturn += "<a href=\"" + screenshotFilename + "\">" + log + "</a>";
        }
        else {
            toReturn += "" + log;
        }
        toReturn += "</td>\n        " + this.generateDurationTD(spec) + "\n        " + this.generateStatusTD(spec, status, withErrorMessages) + "\n      ";
        return toReturn;
    };
    HtmlProcessor.prototype.generateDurationTD = function (spec) {
        if (this.configuration.spec.displayDuration) {
            return "<td class=\"duration\">" + spec.duration + "</td>";
        }
        // would be better to completely remove the column?
        return "<td></td>";
    };
    HtmlProcessor.prototype.generateStatusTD = function (spec, status, withErrorMessages) {
        var toReturn = "<td class=\"status\">";
        if (withErrorMessages && this.configuration.spec.displayErrorMessages) {
            var errorId = "error-" + spec.id;
            toReturn += "\n            <span class=\"status-" + status.toLowerCase() + "\">\n              <a class=\"error-link\" onclick=\"showHide('" + errorId + "')\">" + status.toUpperCase() + "</a>\n            </span>\n            <div id=\"" + errorId + "\" class=\"hide\">\n            " + this.getErrorMessages(spec) + "\n            </div>\n          ";
        }
        else {
            toReturn += "<span class=\"status-" + status.toLowerCase() + "\">" + status.toUpperCase() + "</span>";
        }
        toReturn += "</td>";
        return toReturn;
    };
    HtmlProcessor.prototype.getErrorMessages = function (spec) {
        var logs = [];
        for (var i = 0; i < spec.failedExpectations.length; i++) {
            logs.push("<pre class=\"error-message\">" + spec.failedExpectations[i].message + "</pre>");
            if (spec.failedExpectations[i].stack) {
                logs.push("<pre class=\"error-stack\">" + this.configuration.stacktrace.filter(spec.failedExpectations[i].stack) + "</pre>");
            }
        }
        return logs.join("\n");
    };
    return HtmlProcessor;
}(display_processor_1.DisplayProcessor));
exports.HtmlProcessor = HtmlProcessor;
//# sourceMappingURL=html-processor.js.map