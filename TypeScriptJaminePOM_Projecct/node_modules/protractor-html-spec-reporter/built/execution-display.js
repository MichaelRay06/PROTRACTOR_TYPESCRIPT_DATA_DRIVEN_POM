"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var default_processor_1 = require("./display/processors/default-processor");
var html_processor_1 = require("./display/processors/html-processor");
var suite_numbering_processor_1 = require("./display/processors/suite-numbering-processor");
var summary_processor_1 = require("./display/processors/summary-processor");
var fs = require("fs");
var mkdirp = require("mkdirp");
var path = require("path");
var ExecutionDisplay = (function () {
    function ExecutionDisplay(configuration) {
        this.configuration = configuration;
        this.indent = "  ";
        this.currentIndent = "";
        this.suiteHierarchy = [];
        this.suiteHierarchyDisplayed = [];
        this.successfulSpecs = [];
        this.failedSpecs = [];
        this.pendingSpecs = [];
        this.lastWasNewLine = false;
        this.prepareDestination();
        this.displayProcessors = ExecutionDisplay.initProcessors(this.configuration);
        this.hasCustomDisplaySpecStarted = ExecutionDisplay.hasCustomDisplaySpecStarted(this.displayProcessors);
    }
    ExecutionDisplay.initProcessors = function (configuration) {
        var displayProcessors = [
            new default_processor_1.DefaultProcessor(configuration),
        ];
        if (configuration.suite.displayNumber) {
            displayProcessors.push(new suite_numbering_processor_1.SuiteNumberingProcessor(configuration));
        }
        if (configuration.customProcessors) {
            configuration.customProcessors.forEach(function (Processor) {
                displayProcessors.push(new Processor(configuration));
            });
        }
        displayProcessors.push(new summary_processor_1.SummaryProcessor(configuration));
        // the HtmlProcessor needs to be last because it decorate the all message with html
        displayProcessors.push(new html_processor_1.HtmlProcessor(configuration));
        return displayProcessors;
    };
    ExecutionDisplay.hasCustomDisplaySpecStarted = function (processors) {
        var isDisplayed = false;
        processors.forEach(function (processor) {
            var log = "foo";
            var result = processor.displaySpecStarted({ id: "bar", description: "bar", fullName: "bar" }, log);
            isDisplayed = isDisplayed || result !== log;
        });
        return isDisplayed;
    };
    ExecutionDisplay.prototype.jasmineStarted = function (suiteInfo) {
        this.process(suiteInfo, function (displayProcessor, object, log) {
            return displayProcessor.displayJasmineStarted(object, log);
        });
    };
    ExecutionDisplay.prototype.summary = function (runDetails, metrics) {
        this.process(runDetails, function (displayProcessor, object, log, metricsObject) {
            return displayProcessor.displaySummary(object, log, metricsObject);
        }, metrics);
        this.process(runDetails, function (displayProcessor, object, log) {
            return displayProcessor.displayJasmineDone(object, log);
        });
        if (metrics.random) {
            this.log("Randomized with seed " + metrics.seed + ".");
        }
    };
    ExecutionDisplay.prototype.specStarted = function (result) {
        if (this.hasCustomDisplaySpecStarted) {
            this.ensureSuiteDisplayed();
            this.process(result, function (displayProcessor, object, log) {
                return displayProcessor.displaySpecStarted(object, log);
            });
        }
    };
    ExecutionDisplay.prototype.specDone = function (result) {
        this.process(result, function (displayProcessor, object, log) {
            return displayProcessor.displaySpecDone(object, log);
        });
    };
    ExecutionDisplay.prototype.successful = function (result) {
        this.successfulSpecs.push(result);
        if (this.configuration.spec.displaySuccessful) {
            this.ensureSuiteDisplayed();
            this.process(result, function (displayProcessor, object, log) {
                return displayProcessor.displaySuccessfulSpec(object, log);
            });
        }
    };
    ExecutionDisplay.prototype.failed = function (result) {
        this.failedSpecs.push(result);
        if (this.configuration.spec.displayFailed) {
            this.ensureSuiteDisplayed();
            this.process(result, function (displayProcessor, object, log) {
                return displayProcessor.displayFailedSpec(object, log);
            });
            if (this.configuration.spec.displayErrorMessages) {
                this.increaseIndent();
                this.process(result, function (displayProcessor, object, log) {
                    return displayProcessor.displaySpecErrorMessages(object, log);
                });
                this.decreaseIndent();
            }
        }
    };
    ExecutionDisplay.prototype.pending = function (result) {
        this.pendingSpecs.push(result);
        if (this.configuration.spec.displayPending) {
            this.ensureSuiteDisplayed();
            this.process(result, function (displayProcessor, object, log) {
                return displayProcessor.displayPendingSpec(object, log);
            });
        }
    };
    ExecutionDisplay.prototype.suiteStarted = function (result) {
        this.suiteHierarchy.push(result);
    };
    ExecutionDisplay.prototype.suiteDone = function () {
        var suite = this.suiteHierarchy.pop();
        if (this.suiteHierarchyDisplayed[this.suiteHierarchyDisplayed.length - 1] === suite) {
            this.suiteHierarchyDisplayed.pop();
        }
        this.process(suite, function (displayProcessor, object, log) {
            return displayProcessor.displaySuiteDone(object, log);
        });
    };
    ExecutionDisplay.prototype.ensureSuiteDisplayed = function () {
        if (this.suiteHierarchy.length !== 0) {
            for (var i = this.suiteHierarchyDisplayed.length; i < this.suiteHierarchy.length; i++) {
                this.suiteHierarchyDisplayed.push(this.suiteHierarchy[i]);
                this.displaySuite(this.suiteHierarchy[i]);
            }
        }
        else {
            var name_1 = "Top level suite";
            var topLevelSuite = {
                description: name_1,
                fullName: name_1,
                id: name_1,
            };
            this.suiteHierarchy.push(topLevelSuite);
            this.suiteHierarchyDisplayed.push(topLevelSuite);
            this.displaySuite(topLevelSuite);
        }
    };
    ExecutionDisplay.prototype.displaySuite = function (suite) {
        this.computeSuiteIndent();
        this.process(suite, function (displayProcessor, object, log) {
            return displayProcessor.displaySuite(object, log);
        });
        this.increaseIndent();
    };
    ExecutionDisplay.prototype.process = function (object, processFunction, metrics) {
        var log = "";
        this.displayProcessors.forEach(function (displayProcessor) {
            log = processFunction(displayProcessor, object, log, metrics);
        });
        this.log(log);
    };
    ExecutionDisplay.prototype.computeSuiteIndent = function () {
        this.resetIndent();
        for (var i = 0; i < this.suiteHierarchyDisplayed.length; i++) {
            this.increaseIndent();
        }
    };
    ExecutionDisplay.prototype.log = function (stuff) {
        var _this = this;
        if (this.configuration.testLog) {
            stuff.split("\n").forEach(function (line) {
                console.log(line !== "" ? _this.currentIndent + line : line);
            });
        }
        fs.appendFileSync(this.configuration.destination.folder + this.configuration.destination.fileName, stuff);
        this.lastWasNewLine = false;
    };
    ExecutionDisplay.prototype.resetIndent = function () {
        this.currentIndent = "";
    };
    ExecutionDisplay.prototype.increaseIndent = function () {
        this.currentIndent += this.indent;
    };
    ExecutionDisplay.prototype.decreaseIndent = function () {
        this.currentIndent = this.currentIndent.substr(0, this.currentIndent.length - this.indent.length);
    };
    ExecutionDisplay.prototype.prepareDestination = function () {
        var _this = this;
        // note: ***sync*** everything otherwise other operation will find the destination folder not prepared
        // as expected
        var destFolder = this.configuration.destination.folder;
        try {
            fs.statSync(destFolder); // thows error if not exists
            // the folder exsits, clean it
            var files = fs.readdirSync(destFolder);
            files.forEach(function (file) {
                _this.debugLog("Unliking file: " + file);
                fs.unlinkSync(destFolder + file);
            });
        }
        catch (error) {
            // the folder does not exist
            mkdirp.sync(destFolder);
        }
        fs.createReadStream(__dirname + "/assets/reports.css")
            .pipe(fs.createWriteStream("" + destFolder + path.sep + "reports.css"));
        fs.createReadStream(__dirname + "/assets/scripts.js")
            .pipe(fs.createWriteStream("" + destFolder + path.sep + "scripts.js"));
        // import css from configuration.importStylesheets
        this.configuration.importStylesheets.forEach(function (sPath) {
            var fileName = sPath.substr(sPath.lastIndexOf(path.sep) + 1);
            if (fileName) {
                fs.createReadStream(sPath).pipe(fs.createWriteStream("" + destFolder + path.sep + fileName));
            }
        });
    };
    ExecutionDisplay.prototype.debugLog = function (msg) {
        if (this.configuration.debug) {
            console.log(msg);
        }
    };
    return ExecutionDisplay;
}());
exports.ExecutionDisplay = ExecutionDisplay;
//# sourceMappingURL=execution-display.js.map