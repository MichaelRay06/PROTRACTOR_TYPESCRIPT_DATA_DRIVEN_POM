"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var configuration_parser_1 = require("./configuration-parser");
var execution_display_1 = require("./execution-display");
var execution_metrics_1 = require("./execution-metrics");
var SpecReporter = (function () {
    function SpecReporter(configuration) {
        this.started = false;
        this.finished = false;
        this.configuration = configuration_parser_1.ConfigurationParser.parse(configuration);
        this.display = new execution_display_1.ExecutionDisplay(this.configuration);
        this.metrics = new execution_metrics_1.ExecutionMetrics();
    }
    SpecReporter.prototype.jasmineStarted = function (suiteInfo) {
        this.started = true;
        this.metrics.start(suiteInfo);
        this.display.jasmineStarted(suiteInfo);
    };
    SpecReporter.prototype.jasmineDone = function (runDetails) {
        this.metrics.stop(runDetails);
        this.display.summary(runDetails, this.metrics);
        this.finished = true;
    };
    SpecReporter.prototype.suiteStarted = function (result) {
        this.display.suiteStarted(result);
    };
    SpecReporter.prototype.suiteDone = function (result) {
        this.display.suiteDone();
    };
    SpecReporter.prototype.specStarted = function (result) {
        this.metrics.startSpec();
        this.display.specStarted(result);
    };
    SpecReporter.prototype.specDone = function (result) {
        this.metrics.stopSpec(result);
        if (result.status === "pending") {
            this.metrics.pendingSpecs++;
            this.display.pending(result);
        }
        else if (result.status === "passed") {
            this.metrics.successfulSpecs++;
            this.display.successful(result);
        }
        else if (result.status === "failed") {
            this.metrics.failedSpecs++;
            this.display.failed(result);
        }
        this.display.specDone(result);
    };
    return SpecReporter;
}());
exports.SpecReporter = SpecReporter;
//# sourceMappingURL=spec-reporter.js.map